@page "/roles"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using identityAuthentication.Data
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext Db
@attribute [Authorize(Roles = "Admin")]

<h3>🔐 Role Management (Admin Only)</h3>

@if (isLoading)
{
    <p><em>Carregando dados...</em></p>
}
else
{
    <div class="roles-container">
        <!-- ==================== USUÁRIOS ==================== -->
        <h4>Usuários e seus Cargos</h4>
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Usuário</th>
                    <th>Email</th>
                    <th>Cargos</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@string.Join(", ", user.Roles)</td>
                        <td>
                            <select class="form-select form-select-sm"
                                    @onchange="(e) => OnRoleChange(user, e.Value?.ToString())">
                                <option value="">-- Selecionar Cargo --</option>
                                @foreach (var role in RoleList)
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- ==================== CARGOS EXISTENTES ==================== -->
        <h4 class="mt-4">Cargos Existentes</h4>
        <table class="table table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th>Nome</th>
                    <th>NormalizedName</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var role in RoleList)
                {
                    <tr>
                        <td>@role.Id</td>
                        <td>@role.Name</td>
                        <td>@role.NormalizedName</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteRole(role)">Excluir</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- ==================== BOTÃO PARA FORMULÁRIO ==================== -->
        <button class="btn btn-primary mt-2" @onclick="() => showAddForm = !showAddForm">
            @(showAddForm ? "✖ Cancelar" : "+ Adicionar Cargo")
        </button>

        <!-- ==================== FORMULÁRIO DE NOVA ROLE ==================== -->
        @if (showAddForm)
        {
            <div class="card mt-3 p-3 shadow-sm border border-secondary" style="max-width: 500px;">
                <h5>Criar novo cargo</h5>

                <div class="mb-2">
                    <label class="form-label">Id</label>
                    <input class="form-control" @bind="newRole.Id" placeholder="gerado automaticamente..." readonly />
                </div>

                <div class="mb-2">
                    <label class="form-label">Nome</label>
                    <input class="form-control" @bind="newRole.Name" @oninput="GenerateNormalizedFields" placeholder="Ex: Suporte" />
                </div>

                <div class="mb-2">
                    <label class="form-label">NormalizedName</label>
                    <input class="form-control" @bind="newRole.NormalizedName" readonly />
                </div>

                <div class="mb-2">
                    <label class="form-label">ConcurrencyStamp</label>
                    <input class="form-control" @bind="newRole.ConcurrencyStamp" readonly />
                </div>

                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-success" @onclick="SubmitNewRole">Salvar</button>
                    <button class="btn btn-secondary" @onclick="CancelForm">Cancelar</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool isLoading = true;
    private bool showAddForm = false;

    private List<RoleViewModel> RoleList = new();
    private List<UserViewModel> Users = new();
    private RoleInputModel newRole = new();

    // ======================================
    // 🚀 Ciclo de vida
    // ======================================
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var roles = await RoleManager.Roles.ToListAsync();
        RoleList = roles.Select(r => new RoleViewModel
        {
            Id = r.Id,
            Name = r.Name!,
            NormalizedName = r.NormalizedName!
        }).ToList();

        var users = await UserManager.Users.ToListAsync();
        Users.Clear();

        foreach (var user in users)
        {
            var userRoles = await UserManager.GetRolesAsync(user);
            Users.Add(new UserViewModel
            {
                Id = user.Id,
                UserName = user.UserName!,
                Email = user.Email!,
                Roles = userRoles.ToList()
            });
        }
    }

    // ======================================
    // 🧩 Alteração de Cargo do Usuário
    // ======================================
    private async Task OnRoleChange(UserViewModel user, string? newRole)
    {
        if (string.IsNullOrEmpty(newRole))
            return;

        var appUser = await UserManager.FindByIdAsync(user.Id);
        var currentRoles = await UserManager.GetRolesAsync(appUser!);

        await UserManager.RemoveFromRolesAsync(appUser!, currentRoles);
        await UserManager.AddToRoleAsync(appUser!, newRole);

        await LoadData();
    }

    // ======================================
    // ➕ Criação Automática de Nova Role
    // ======================================
    private void GenerateNormalizedFields(ChangeEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newRole.Name))
        {
            var normalized = newRole.Name.Trim().ToUpperInvariant();
            newRole.NormalizedName = normalized;
            newRole.Id = $"role-{normalized.ToLower()}";
            newRole.ConcurrencyStamp = Guid.NewGuid().ToString();
        }
    }

    private async Task SubmitNewRole()
    {
        if (string.IsNullOrWhiteSpace(newRole.Name) ||
            string.IsNullOrWhiteSpace(newRole.NormalizedName) ||
            string.IsNullOrWhiteSpace(newRole.Id))
            return;

        var exists = await RoleManager.RoleExistsAsync(newRole.Name);
        if (!exists)
        {
            var role = new IdentityRole
            {
                Id = newRole.Id,
                Name = newRole.Name,
                NormalizedName = newRole.NormalizedName,
                ConcurrencyStamp = newRole.ConcurrencyStamp
            };

            var result = await RoleManager.CreateAsync(role);

            if (result.Succeeded)
            {
                await LoadData(); // Atualiza a tabela
                showAddForm = false;
                newRole = new(); // Limpa o formulário
            }
        }
    }

    private void CancelForm()
    {
        showAddForm = false;
        newRole = new();
    }

    // ======================================
    // 🗑️ Excluir Role
    // ======================================
    private async Task DeleteRole(RoleViewModel role)
    {
        var identityRole = await RoleManager.FindByIdAsync(role.Id);
        if (identityRole is not null)
        {
            await RoleManager.DeleteAsync(identityRole);
        }
        await LoadData();
    }

    // ======================================
    // 🧱 ViewModels
    // ======================================
    public class RoleViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string NormalizedName { get; set; } = string.Empty;
    }

    public class UserViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
    }

    public class RoleInputModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string NormalizedName { get; set; } = string.Empty;
        public string ConcurrencyStamp { get; set; } = Guid.NewGuid().ToString();
    }
}
