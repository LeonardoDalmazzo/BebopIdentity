@page "/roles"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using identityAuthentication.Data
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext Db
@attribute [Authorize(Roles = "Admin")]

<div class="roles-wrapper container-fluid py-3">
    <h3 class="text-center mb-4">
        <i class="fa-solid fa-user-shield me-2"></i> Gerenciamento de Cargos
    </h3>

    @if (isLoading)
    {
        <p class="text-center"><em>Carregando dados...</em></p>
    }
    else
    {
        <div class="roles-grid">
            <!-- ==================== USUÁRIOS ==================== -->
            <div class="card shadow-sm p-3">
                <h5><i class="fa-solid fa-users me-2"></i>Usuários e seus Cargos</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Usuário</th>
                                <th>Email</th>
                                <th>Cargos</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>@string.Join(", ", user.Roles)</td>
                                    <td>
                                        <select class="form-select form-select-sm"
                                                @onchange="(e) => OnRoleChange(user, e.Value?.ToString())">
                                            <option value="">-- Selecionar Cargo --</option>
                                            @foreach (var role in RoleList)
                                            {
                                                <option value="@role.Name">@role.Name</option>
                                            }
                                        </select>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- ==================== CARGOS EXISTENTES ==================== -->
            <div class="card shadow-sm p-3 mt-4">
                <h5><i class="fa-solid fa-list-check me-2"></i>Cargos Existentes</h5>

                <div class="table-responsive">
                    <table class="table table-bordered table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in RoleList)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm"
                                                title="Excluir Cargo"
                                                @onclick="() => DeleteRole(role)">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- ==================== BOTÃO TOGGLE ==================== -->
                <button class="btn btn-primary mt-3 w-100"
                        @onclick="() => showAddForm = !showAddForm">
                    <i class="fa-solid @(showAddForm ? "fa-xmark" : "fa-plus") me-2"></i>
                    @(showAddForm ? "Cancelar" : "Adicionar Novo Cargo")
                </button>

                <!-- ==================== FORMULÁRIO SIMPLIFICADO ==================== -->
                @if (showAddForm)
                {
                    <div class="card mt-3 p-4 border border-secondary bg-light text-center">
                        <h5 class="mb-3">
                            <i class="fa-solid fa-id-badge me-2"></i>Adicionar Novo Cargo
                        </h5>

                        <div class="mb-3 text-start">
                            <label class="form-label fw-bold">Nome do Cargo</label>
                            <input class="form-control"
                                   placeholder="Ex: Suporte, Atendente, Técnico..."
                                   @bind="newRole.Name"
                                   @oninput="GenerateNormalizedFields" />
                        </div>

                        <div class="d-flex justify-content-center gap-3 mt-3">
                            <button class="btn btn-success px-4" @onclick="SubmitNewRole">
                                <i class="fa-solid fa-check me-1"></i>Salvar
                            </button>
                            <button class="btn btn-secondary px-4" @onclick="CancelForm">
                                <i class="fa-solid fa-xmark me-1"></i>Cancelar
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool showAddForm = false;
    private List<RoleViewModel> RoleList = new();
    private List<UserViewModel> Users = new();
    private RoleInputModel newRole = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var roles = await RoleManager.Roles.ToListAsync();
        RoleList = roles.Select(r => new RoleViewModel
        {
            Id = r.Id,
            Name = r.Name!,
            NormalizedName = r.NormalizedName!
        }).ToList();

        var users = await UserManager.Users.ToListAsync();
        Users.Clear();

        foreach (var user in users)
        {
            var userRoles = await UserManager.GetRolesAsync(user);
            Users.Add(new UserViewModel
            {
                Id = user.Id,
                UserName = user.UserName!,
                Email = user.Email!,
                Roles = userRoles.ToList()
            });
        }
    }

    private async Task OnRoleChange(UserViewModel user, string? newRole)
    {
        if (string.IsNullOrEmpty(newRole))
            return;

        var appUser = await UserManager.FindByIdAsync(user.Id);
        var currentRoles = await UserManager.GetRolesAsync(appUser!);

        await UserManager.RemoveFromRolesAsync(appUser!, currentRoles);
        await UserManager.AddToRoleAsync(appUser!, newRole);

        await LoadData();
    }

    private void GenerateNormalizedFields(ChangeEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newRole.Name))
        {
            var normalized = newRole.Name.Trim().ToUpperInvariant();
            newRole.NormalizedName = normalized;
            newRole.Id = $"role-{normalized.ToLower()}";
            newRole.ConcurrencyStamp = Guid.NewGuid().ToString();
        }
    }

    private async Task SubmitNewRole()
    {
        if (string.IsNullOrWhiteSpace(newRole.Name))
            return;

        // 🔒 Garante que todos os campos essenciais estão preenchidos
        if (string.IsNullOrWhiteSpace(newRole.Id))
        {
            var normalized = newRole.Name.Trim().ToUpperInvariant();
            newRole.NormalizedName = normalized;
            newRole.Id = $"role-{normalized.ToLower()}";
            newRole.ConcurrencyStamp = Guid.NewGuid().ToString();
        }

        var exists = await RoleManager.RoleExistsAsync(newRole.Name);
        if (!exists)
        {
            var role = new IdentityRole
            {
                Id = newRole.Id,
                Name = newRole.Name,
                NormalizedName = newRole.NormalizedName,
                ConcurrencyStamp = newRole.ConcurrencyStamp
            };

            var result = await RoleManager.CreateAsync(role);
            if (result.Succeeded)
            {
                await LoadData();
                showAddForm = false;
                newRole = new();
            }
        }
    }

    private void CancelForm()
    {
        showAddForm = false;
        newRole = new();
    }

    private async Task DeleteRole(RoleViewModel role)
    {
        var identityRole = await RoleManager.FindByIdAsync(role.Id);
        if (identityRole is not null)
        {
            await RoleManager.DeleteAsync(identityRole);
        }
        await LoadData();
    }

    public class RoleViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string NormalizedName { get; set; } = string.Empty;
    }

    public class UserViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
    }

    public class RoleInputModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string NormalizedName { get; set; } = string.Empty;
        public string ConcurrencyStamp { get; set; } = Guid.NewGuid().ToString();
    }
}
