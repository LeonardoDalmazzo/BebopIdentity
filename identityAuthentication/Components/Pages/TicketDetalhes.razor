@page "/ticket/{TicketId:guid}"
@rendermode InteractiveServer
@using identityAuthentication.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize]

<PageTitle>Detalhes Ticket #@TicketId.ToString().Substring(0, 8)...</PageTitle>

<div class="ticket-detalhes-wrapper container py-4">

    @if (isLoading)
    {
        <p class="text-center"><em>Carregando detalhes do ticket...</em></p>
    }
    else if (chamado == null)
    {
        <div class="alert alert-danger text-center" role="alert">
            Ticket não encontrado ou você não tem permissão para visualizá-lo.
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
             <h3 class="mb-0">Ticket #@TicketId.ToString().Substring(0, 8)...</h3>
             <a href="/tickets" class="btn btn-sm btn-outline-secondary">
                <i class="fa-solid fa-arrow-left me-1"></i> Voltar para Lista
            </a>
        </div>

        <div class="row g-4">
            <!-- Coluna Esquerda: Detalhes -->
            <div class="col-lg-7">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light fw-bold">
                        Detalhes do Chamado
                    </div>
                    <div class="card-body">
                        <h4 class="card-title">@chamado.Titulo</h4>
                        <hr/>
                        <p><strong>Descrição:</strong></p>
                        <p style="white-space: pre-wrap;">@chamado.Descricao</p>
                    </div>
                </div>

                <!-- Histórico / Comentários -->
                <div class="card shadow-sm">
                     <div class="card-header bg-light fw-bold">
                        Histórico e Comentários
                    </div>
                    <div class="card-body">
                        @if (!chamado.Historico.Any())
                        {
                            <p class="text-muted text-center">Nenhum comentário ainda.</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush history-list">
                                @foreach(var historico in chamado.Historico.OrderByDescending(h => h.DataComentario))
                                {
                                    <li class="list-group-item">
                                        <div class="d-flex w-100 justify-content-between">
                                            <small class="fw-bold text-primary">@historico.Usuario?.UserName</small>
                                            <small class="text-muted">@historico.DataComentario.ToLocalTime().ToString("g")</small>
                                        </div>
                                        <p class="mb-1 mt-1" style="white-space: pre-wrap;">@historico.Comentario</p>
                                        @if (historico.EraStatusId != null && historico.NovoStatusId != null && historico.StatusAnterior != null && historico.StatusNovo != null)
                                        {
                                            <small class="text-info fst-italic d-block mt-1">
                                                Status alterado de '@historico.StatusAnterior.NomeStatus' para '@historico.StatusNovo.NomeStatus'.
                                            </small>
                                        }
                                    </li>
                                }
                            </ul>
                        }

                        <hr/>
                        <h5 class="mt-4">Adicionar Comentário</h5>
                        <!-- Formulário de Comentário -->
                        <EditForm Model="novoComentario" OnValidSubmit="HandleCommentSubmit" FormName="CommentForm">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <InputTextArea class="form-control" rows="4" @bind-Value="novoComentario.Comentario" placeholder="Digite seu comentário ou atualização aqui..." />
                                <ValidationMessage For="() => novoComentario.Comentario" />
                            </div>
                            <button type="submit" class="btn btn-success w-100" disabled="@isSubmittingComment">
                                @if (isSubmittingComment)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Enviando...</span>
                                }
                                else
                                {
                                     <i class="fa-solid fa-paper-plane me-1"></i>
                                     <span>Enviar Comentário</span>
                                }
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>

            <!-- Coluna Direita: Informações e Ações -->
            <div class="col-lg-5">
                <div class="card shadow-sm">
                     <div class="card-header bg-light fw-bold d-flex justify-content-between align-items-center">
                        Informações
                        <AuthorizeView Roles="Admin, SuporteTI">
                             @if (!isEditing)
                             {
                                 <button class="btn btn-sm btn-outline-secondary" @onclick="EnterEditMode">
                                     <i class="fa-solid fa-pencil me-1"></i> Editar
                                 </button>
                             }
                        </AuthorizeView>
                    </div>

                    @if (isEditing && currentUserIsAdminOrSupport) // Adiciona verificação de permissão aqui
                    {
                        <!-- MODO EDIÇÃO -->
                        <EditForm Model="editModel" OnValidSubmit="HandleUpdateTicket" FormName="EditTicketForm">
                            <DataAnnotationsValidator />
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <label class="form-label fw-bold small mb-1">Status</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="editModel.IdStatus">
                                        @foreach(var s in StatusLista) { <option value="@s.IdStatus">@s.NomeStatus</option> }
                                    </InputSelect>
                                     <ValidationMessage For="() => editModel.IdStatus" />
                                </li>
                                <li class="list-group-item">
                                    <label class="form-label fw-bold small mb-1">Prioridade</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="editModel.IdPrioridade">
                                        @foreach(var p in PrioridadesLista) { <option value="@p.IdPrioridade">@p.NomePrioridade</option> }
                                    </InputSelect>
                                     <ValidationMessage For="() => editModel.IdPrioridade" />
                                </li>
                                <li class="list-group-item">
                                    <label class="form-label fw-bold small mb-1">Categoria</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="editModel.IdCategoria">
                                        @foreach(var c in CategoriasLista) { <option value="@c.IdCategoria">@c.NomeCategoria</option> }
                                    </InputSelect>
                                    <ValidationMessage For="() => editModel.IdCategoria" />
                                </li>
                                <li class="list-group-item">
                                    <label class="form-label fw-bold small mb-1">Atendente</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="editModel.IdAtendente">
                                        <option value="">-- Não atribuído --</option> <!-- Usa string vazia para Nulo -->
                                        @foreach(var atendente in AtendentesLista) { <option value="@atendente.Id">@atendente.UserName</option> }
                                    </InputSelect>
                                    <!-- Validação não necessária para campo anulável -->
                                </li>
                                <!-- Campos não editáveis -->
                                <li class="list-group-item small"><strong>Aberto em:</strong> @chamado.DataAbertura.ToLocalTime().ToString("g")</li>
                                <li class="list-group-item small"><strong>Solicitante:</strong> @chamado.Solicitante?.UserName</li>
                                <li class="list-group-item small"><strong>Empresa:</strong> @chamado.Empresa?.NomeEmpresa</li>
                                @if(chamado.Setor != null) { <li class="list-group-item small"><strong>Setor:</strong> @chamado.Setor.NomeSetor</li> }
                                @if(chamado.DataFechamento != null) { <li class="list-group-item small"><strong>Fechado em:</strong> @chamado.DataFechamento.Value.ToLocalTime().ToString("g")</li> }
                            </ul>
                            <div class="card-footer d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelEditMode">Cancelar</button>
                                <button type="submit" class="btn btn-sm btn-primary" disabled="@isSavingEdit">
                                     @if (isSavingEdit)
                                     {
                                         <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                         <span>Salvando...</span>
                                     }
                                     else
                                     {
                                         <span>Salvar Alterações</span>
                                     }
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <!-- MODO VISUALIZAÇÃO -->
                         <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>Status:</strong> @chamado.Status?.NomeStatus</li>
                            <li class="list-group-item">
                                <strong>Prioridade:</strong>
                                <span class="badge ms-1" style="background-color: @(chamado.Prioridade?.CorHex ?? "#6c757d"); color: #fff;">
                                    @chamado.Prioridade?.NomePrioridade
                                </span>
                            </li>
                            <li class="list-group-item"><strong>Categoria:</strong> @chamado.Categoria?.NomeCategoria</li>
                            <li class="list-group-item"><strong>Aberto em:</strong> @chamado.DataAbertura.ToLocalTime().ToString("g")</li>
                            <li class="list-group-item"><strong>Solicitante:</strong> @chamado.Solicitante?.UserName</li>
                            <li class="list-group-item"><strong>Empresa:</strong> @chamado.Empresa?.NomeEmpresa</li>
                            @if(chamado.Setor != null) { <li class="list-group-item"><strong>Setor:</strong> @chamado.Setor.NomeSetor</li> }
                            <li class="list-group-item"><strong>Atendente:</strong> @(chamado.Atendente?.UserName ?? "Não atribuído")</li>
                            @if(chamado.DataFechamento != null) { <li class="list-group-item"><strong>Fechado em:</strong> @chamado.DataFechamento.Value.ToLocalTime().ToString("g")</li> }
                        </ul>
                    }

                    <!-- Botão Aceitar Chamado -->
                     <AuthorizeView Roles="Admin, SuporteTI">
                         <Authorized>
                            @if(!isEditing && chamado?.Atendente == null) // Adicionado null check para chamado
                            {
                                <div class="card-footer text-center">
                                    <button class="btn btn-primary w-100" @onclick="AcceptTicketAsync" disabled="@isAcceptingTicket">
                                         @if (isAcceptingTicket)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Aceitando...</span>
                                        }
                                        else
                                        {
                                            <i class="fa-solid fa-user-check me-1"></i>
                                            <span>Aceitar Chamado</span>
                                        }
                                    </button>
                                </div>
                            }
                        </Authorized>
                     </AuthorizeView>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid TicketId { get; set; }

    // Flags
    private bool isLoading = true;
    private bool isSubmittingComment = false;
    private bool isAcceptingTicket = false;
    private bool isEditing = false;
    private bool isSavingEdit = false;

    // Dados
    private Chamado? chamado;
    private string? currentUserId;
    private bool currentUserIsAdminOrSupport = false;

    // Listas Dropdown
    private List<StatusChamado> StatusLista = new();
    private List<Prioridade> PrioridadesLista = new();
    private List<Categoria> CategoriasLista = new();
    private List<ApplicationUser> AtendentesLista = new();

    // IDs Status
    private Guid? statusEmAndamentoId;
    private Guid? statusFechadoId;

    // ViewModels Forms
    private CommentInputModel novoComentario = new();
    private EditTicketInputModel editModel = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        isEditing = false;
        novoComentario = new();
        chamado = null; // Limpa para recarregar

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && currentUserId == null) // Pega userId apenas uma vez
        {
             currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
             bool isAdmin = user.IsInRole("Admin");
             bool isSuporteTI = user.IsInRole("SuporteTI");
             currentUserIsAdminOrSupport = isAdmin || isSuporteTI;
        }

        if(!string.IsNullOrEmpty(currentUserId)) // Prossegue apenas se tiver user Id
        {
            chamado = await DbContext.Chamados
                .Include(c => c.Solicitante)
                .Include(c => c.Empresa).Include(c => c.Setor)
                .Include(c => c.Categoria).Include(c => c.Prioridade).Include(c => c.Status)
                .Include(c => c.Atendente)
                .Include(c => c.Historico.OrderByDescending(h=>h.DataComentario)) // Ordena aqui
                    .ThenInclude(h => h.Usuario)
                .Include(c => c.Historico).ThenInclude(h => h.StatusAnterior)
                .Include(c => c.Historico).ThenInclude(h => h.StatusNovo)
                .FirstOrDefaultAsync(c => c.IdChamado == TicketId);

            // Validação Permissão
            if (chamado != null && !currentUserIsAdminOrSupport && chamado.IdSolicitante != currentUserId && chamado.IdAtendente != currentUserId)
            {
                chamado = null;
            }

            // Carrega listas para dropdowns (apenas se precisar e ainda não carregou)
            if (chamado != null && currentUserIsAdminOrSupport && !StatusLista.Any())
            {
                StatusLista = await DbContext.StatusChamados.OrderBy(s => s.NomeStatus).ToListAsync();
                PrioridadesLista = await DbContext.Prioridades.OrderBy(p => p.NivelUrgencia).ToListAsync();
                CategoriasLista = await DbContext.Categorias.Where(c=> c.Ativo).OrderBy(c => c.NomeCategoria).ToListAsync();

                // Busca usuários Admin/Suporte
                var adminRole = await DbContext.Roles.AsNoTracking().FirstOrDefaultAsync(r => r.Name == "Admin");
                var suporteRole = await DbContext.Roles.AsNoTracking().FirstOrDefaultAsync(r => r.Name == "SuporteTI");
                if(adminRole != null || suporteRole != null)
                {
                     var rolesToQuery = new List<string>();
                     if(adminRole != null) rolesToQuery.Add(adminRole.Id);
                     if(suporteRole != null) rolesToQuery.Add(suporteRole.Id);

                     AtendentesLista = await DbContext.UserRoles
                        .Where(ur => rolesToQuery.Contains(ur.RoleId))
                        .Select(ur => ur.UserId)
                        .Distinct()
                        .Join(DbContext.Users, userId => userId, appUser => appUser.Id, (userId, appUser) => appUser)
                        .OrderBy(u => u.UserName)
                        .ToListAsync();
                }

                // Busca IDs Status
                statusEmAndamentoId = StatusLista.FirstOrDefault(s => s.NomeStatus == "Em Andamento")?.IdStatus;
                statusFechadoId = StatusLista.FirstOrDefault(s => s.NomeStatus == "Fechado")?.IdStatus;
            }
        }
        isLoading = false;
    }

    private async Task HandleCommentSubmit()
    {
        if (chamado == null || string.IsNullOrWhiteSpace(currentUserId)) return;
        isSubmittingComment = true;

        var historicoEntry = new ChamadoHistorico
        {
            IdChamado = chamado.IdChamado,
            IdUsuario = currentUserId,
            Comentario = novoComentario.Comentario,
            DataComentario = DateTime.UtcNow
        };
        DbContext.ChamadoHistorico.Add(historicoEntry);
        await DbContext.SaveChangesAsync(); // Corrigido: Adicionado await

        // Recarrega os dados para mostrar o novo comentário (evita recarregar a página inteira)
         if (chamado.Historico is List<ChamadoHistorico> historicoList) // Verifica se é lista para Add
        {
            // Precisamos carregar o usuário do histórico recém-criado
            historicoEntry.Usuario = await DbContext.Users.FindAsync(currentUserId);
            historicoList.Insert(0, historicoEntry); // Adiciona no início da lista (ordem desc)
        } else {
             await OnParametersSetAsync(); // Fallback: Recarrega tudo
        }
        novoComentario = new(); // Limpa form
        isSubmittingComment = false;
        StateHasChanged(); // Força atualização da UI
    }

    private async Task AcceptTicketAsync()
    {
        if (chamado == null || string.IsNullOrWhiteSpace(currentUserId) || !currentUserIsAdminOrSupport || chamado.IdAtendente != null || statusEmAndamentoId == null) return;
        isAcceptingTicket = true;

        var ticketToUpdate = await DbContext.Chamados.FindAsync(chamado.IdChamado);
        if (ticketToUpdate == null) { isAcceptingTicket = false; return; }

        Guid? statusAnteriorId = ticketToUpdate.IdStatus;
        ticketToUpdate.IdAtendente = currentUserId;
        ticketToUpdate.IdStatus = statusEmAndamentoId.Value;

        var historicoEntry = CreateHistoryEntry($"Chamado aceito pelo atendente.", statusAnteriorId, statusEmAndamentoId.Value);
        DbContext.ChamadoHistorico.Add(historicoEntry);

        await DbContext.SaveChangesAsync(); // Corrigido: Adicionado await
        await OnParametersSetAsync(); // Recarrega
        isAcceptingTicket = false;
    }

    private void EnterEditMode()
    {
        if (chamado == null) return;
        editModel = new EditTicketInputModel
        {
            IdStatus = chamado.IdStatus,
            IdPrioridade = chamado.IdPrioridade,
            IdCategoria = chamado.IdCategoria,
            IdAtendente = chamado.IdAtendente ?? "" // Usa string vazia para nulo no InputSelect
        };
        isEditing = true;
    }

    private void CancelEditMode()
    {
        isEditing = false;
    }

    private async Task HandleUpdateTicket()
    {
        if (chamado == null || string.IsNullOrWhiteSpace(currentUserId) || !currentUserIsAdminOrSupport) return;
        isSavingEdit = true;

        var ticketToUpdate = await DbContext.Chamados.FindAsync(chamado.IdChamado); // Usa o chamado original como referência
        if (ticketToUpdate == null) { isSavingEdit = false; return; }

        var historicosParaAdicionar = new List<ChamadoHistorico>();
        var now = DateTime.UtcNow;
        bool hasChanges = false; // Flag para saber se algo mudou

        // Compara Status
        if (ticketToUpdate.IdStatus != editModel.IdStatus)
        {
            historicosParaAdicionar.Add(CreateHistoryEntry($"Status alterado.", ticketToUpdate.IdStatus, editModel.IdStatus));
            ticketToUpdate.IdStatus = editModel.IdStatus;
            hasChanges = true;
            // Atualiza DataFechamento
            if(editModel.IdStatus == statusFechadoId) {
                ticketToUpdate.DataFechamento = now;
            } else {
                 ticketToUpdate.DataFechamento = null;
            }
        }
        // Compara Prioridade
        if (ticketToUpdate.IdPrioridade != editModel.IdPrioridade)
        {
             historicosParaAdicionar.Add(CreateHistoryEntry($"Prioridade alterada.", null, null, editModel.IdPrioridade, null)); // Passa ID novo
            ticketToUpdate.IdPrioridade = editModel.IdPrioridade;
            hasChanges = true;
        }
        // Compara Categoria
        if (ticketToUpdate.IdCategoria != editModel.IdCategoria)
        {
            historicosParaAdicionar.Add(CreateHistoryEntry($"Categoria alterada.", null, null, null, editModel.IdCategoria)); // Passa ID novo
            ticketToUpdate.IdCategoria = editModel.IdCategoria;
            hasChanges = true;
        }
        // Compara Atendente (string vazia == null)
        string? newAtendenteId = string.IsNullOrEmpty(editModel.IdAtendente) ? null : editModel.IdAtendente;
        if (ticketToUpdate.IdAtendente != newAtendenteId)
        {
             historicosParaAdicionar.Add(CreateHistoryEntry($"Atendente alterado.", null, null, null, null, newAtendenteId)); // Passa ID novo
            ticketToUpdate.IdAtendente = newAtendenteId;
            hasChanges = true;
        }

        if(hasChanges) {
             await DbContext.ChamadoHistorico.AddRangeAsync(historicosParaAdicionar);
             await DbContext.SaveChangesAsync();
        }

        isEditing = false;
        isSavingEdit = false;
        await OnParametersSetAsync(); // Recarrega
    }

    // Helper Refatorado
    private ChamadoHistorico CreateHistoryEntry(string comentarioBase, Guid? statusAnteriorId = null, Guid? statusNovoId = null, Guid? prioridadeNovaId = null, Guid? categoriaNovaId = null, string? atendenteNovoId = null)
    {
        string comentarioFinal = comentarioBase;
        // Adiciona detalhes específicos da mudança
        if(statusNovoId.HasValue && statusAnteriorId.HasValue) {
            var statusAnt = StatusLista.FirstOrDefault(s => s.IdStatus == statusAnteriorId)?.NomeStatus ?? "N/A";
            var statusNov = StatusLista.FirstOrDefault(s => s.IdStatus == statusNovoId)?.NomeStatus ?? "N/A";
            comentarioFinal += $" De '{statusAnt}' para '{statusNov}'.";
        } else if (prioridadeNovaId.HasValue) {
             var prio = PrioridadesLista.FirstOrDefault(p=>p.IdPrioridade == prioridadeNovaId)?.NomePrioridade ?? "N/A";
             comentarioFinal += $" Nova prioridade: {prio}.";
        } else if (categoriaNovaId.HasValue) {
            var cat = CategoriasLista.FirstOrDefault(c=>c.IdCategoria == categoriaNovaId)?.NomeCategoria ?? "N/A";
            comentarioFinal += $" Nova categoria: {cat}.";
        } else if (atendenteNovoId != null) { // Verifica se foi passado um ID novo (não nulo/vazio)
             var atendente = AtendentesLista.FirstOrDefault(a => a.Id == atendenteNovoId)?.UserName ?? "N/A";
             comentarioFinal += $" Novo atendente: {atendente}.";
        } else if (editModel.IdAtendente == "") { // Verifica se editModel indica remoção (string vazia)
            comentarioFinal += $" Atendente removido.";
        }


        return new ChamadoHistorico
        {
            IdChamado = TicketId,
            IdUsuario = currentUserId!,
            Comentario = comentarioFinal,
            DataComentario = DateTime.UtcNow,
            EraStatusId = statusAnteriorId,
            NovoStatusId = statusNovoId
        };
    }

    // Modelo Input Comentário
    public class CommentInputModel
    {
        [Required(ErrorMessage = "O comentário não pode estar vazio.")]
        [StringLength(2000, ErrorMessage = "O comentário é muito longo.")]
        public string Comentario { get; set; } = string.Empty; // Corrigido aqui
    }

    // Modelo Input Edição Ticket
    public class EditTicketInputModel
    {
        [Required] public Guid IdStatus { get; set; }
        [Required] public Guid IdPrioridade { get; set; }
        [Required] public Guid IdCategoria { get; set; }
        public string? IdAtendente { get; set; } // String? para <InputSelect> e opção ""
    }
}