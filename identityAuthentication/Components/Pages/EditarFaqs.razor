@page "/editarfaqs"
@rendermode InteractiveServer
@using identityAuthentication.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations @* <--- Necessário para o InputModel *@
@inject ApplicationDbContext DbContext
@attribute [Authorize(Roles = "Admin")]

<div class="faq-wrapper container-fluid py-3">
    <h3 class="text-center mb-4">
        <i class="fa-solid fa-pen-to-square me-2"></i> Gerenciamento de FAQs
    </h3>

    @if (isLoading)
    {
        <p class="text-center"><em>Carregando dados...</em></p>
    }
    else
    {
        <div class="card shadow-sm p-3">
            <h5><i class="fa-solid fa-list-check me-2"></i>FAQs Existentes</h5>

            @if (!FaqsLista.Any())
            {
                <p class="text-center text-muted mt-3">Nenhuma FAQ cadastrada ainda.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover align-middle mt-2">
                        <thead class="table-dark">
                            <tr>
                                <th>Pergunta</th>
                                <th>Categoria</th>
                                <th>Ativo</th>
                                <th style="width: 100px;">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var faq in FaqsLista)
                            {
                                <tr>
                                    <td>@faq.Pergunta</td>
                                    <td>@faq.Categoria?.NomeCategoria</td>
                                    <td>
                                        <span class="badge @(faq.Ativo ? "bg-success" : "bg-danger")">
                                            @(faq.Ativo ? "Sim" : "Não")
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm"
                                                title="Excluir FAQ"
                                                @onclick="() => DeleteItem(faq)">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <button class="btn btn-primary mt-3 w-100" @onclick="ToggleAddForm">
                <i class="fa-solid @(showAddForm ? "fa-xmark" : "fa-plus") me-2"></i>
                @(showAddForm ? "Cancelar" : "Adicionar Nova FAQ")
            </button>

            @if (showAddForm)
            {
                <div class="card mt-3 p-4 border border-secondary bg-light">
                    <h5 class="mb-3 text-center">
                        <i class="fa-solid fa-plus-circle me-2"></i>Adicionar Nova FAQ
                    </h5>

                    <EditForm Model="novoFaq" OnValidSubmit="SubmitNewItem">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label fw-bold">Categoria</label>
                            <InputSelect class="form-select" @bind-Value="novoFaq.IdCategoria">
                                <option value="">-- Selecione uma categoria --</option>
                                @foreach (var cat in CategoriasLista)
                                {
                                    <option value="@cat.IdCategoria">@cat.NomeCategoria</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => novoFaq.IdCategoria" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">Pergunta</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="novoFaq.Pergunta" />
                            <ValidationMessage For="() => novoFaq.Pergunta" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Resposta</label>
                            <InputTextArea class="form-control" rows="5" @bind-Value="novoFaq.Resposta" />
                            <ValidationMessage For="() => novoFaq.Resposta" />
                        </div>

                        <div class="form-check mb-3">
                            <InputCheckbox class="form-check-input" @bind-Value="novoFaq.Ativo" id="ativoCheckFaq" />
                            <label class="form-check-label" for="ativoCheckFaq">FAQ Ativa</label>
                        </div>

                        <div class="d-flex justify-content-center gap-3 mt-3">
                            <button type="submit" class="btn btn-success px-4">
                                <i class="fa-solid fa-check me-1"></i>Salvar
                            </button>
                            <button type="button" class="btn btn-secondary px-4" @onclick="CancelForm">
                                <i class="fa-solid fa-xmark me-1"></i>Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool showAddForm = false;
    
    private List<FAQ> FaqsLista = new();
    private List<Categoria> CategoriasLista = new();
    
    private FaqInputModel novoFaq = new() { Ativo = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        // Carrega categorias ativas para o dropdown
        CategoriasLista = await DbContext.Categorias
            .Where(c => c.Ativo)
            .OrderBy(c => c.NomeCategoria)
            .ToListAsync();

        // Carrega FAQs existentes, incluindo a Categoria
        FaqsLista = await DbContext.FAQs
            .Include(f => f.Categoria) 
            .OrderBy(f => f.Pergunta)
            .ToListAsync();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (showAddForm)
        {
            ResetForm();
        }
    }

    private void CancelForm()
    {
        showAddForm = false;
        ResetForm();
    }
    
    private void ResetForm()
    {
        novoFaq = new() { Ativo = true };
    }

    private async Task SubmitNewItem()
    {
        var faqParaSalvar = new FAQ
        {
            Pergunta = novoFaq.Pergunta,
            Resposta = novoFaq.Resposta,
            IdCategoria = novoFaq.IdCategoria,
            Ativo = novoFaq.Ativo
        };

        DbContext.FAQs.Add(faqParaSalvar);
        await DbContext.SaveChangesAsync();

        await LoadData();
        CancelForm();
    }

    private async Task DeleteItem(FAQ faq)
    {
        var itemParaExcluir = await DbContext.FAQs.FindAsync(faq.IdFAQ);
        if (itemParaExcluir is not null)
        {
            DbContext.FAQs.Remove(itemParaExcluir);
            await DbContext.SaveChangesAsync();
        }
        await LoadData();
    }
    
    // Modelo de Input (Clean Code) para o formulário
    public class FaqInputModel
    {
        [Required(ErrorMessage = "A pergunta é obrigatória.")]
        public string Pergunta { get; set; } = string.Empty;

        [Required(ErrorMessage = "A resposta é obrigatória.")]
        public string Resposta { get; set; } = string.Empty;

        [Required(ErrorMessage = "É obrigatório selecionar uma categoria.")]
        public Guid IdCategoria { get; set; }

        public bool Ativo { get; set; } = true;
    }
}