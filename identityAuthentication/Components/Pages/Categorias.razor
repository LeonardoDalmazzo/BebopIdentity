@page "/categorias"
@rendermode InteractiveServer
@using identityAuthentication.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext DbContext
@attribute [Authorize(Roles = "Admin")]

<div class="categoria-wrapper container-fluid py-3">
    <h3 class="text-center mb-4">
        <i class="fa-solid fa-tags me-2"></i> Gerenciamento de Categorias
    </h3>

    @if (isLoading)
    {
        <p class="text-center"><em>Carregando dados...</em></p>
    }
    else
    {
        <div class="card shadow-sm p-3">
            <h5><i class="fa-solid fa-list-check me-2"></i>Categorias Existentes</h5>

            @if (!CategoriasLista.Any())
            {
                <p class="text-center text-muted mt-3">Nenhuma categoria cadastrada ainda.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover align-middle mt-2">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>Descrição</th>
                                <th>Ativo</th>
                                <th style="width: 100px;">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in CategoriasLista)
                            {
                                <tr>
                                    <td>@item.NomeCategoria</td>
                                    <td>@item.Descricao</td>
                                    <td>
                                        <span class="badge @(item.Ativo ? "bg-success" : "bg-danger")">
                                            @(item.Ativo ? "Sim" : "Não")
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm"
                                                title="Excluir Categoria"
                                                @onclick="() => DeleteItem(item)">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <button class="btn btn-primary mt-3 w-100" @onclick="ToggleAddForm">
                <i class="fa-solid @(showAddForm ? "fa-xmark" : "fa-plus") me-2"></i>
                @(showAddForm ? "Cancelar" : "Adicionar Nova Categoria")
            </button>

            @if (showAddForm)
            {
                <div class="card mt-3 p-4 border border-secondary bg-light">
                    <h5 class="mb-3 text-center">
                        <i class="fa-solid fa-plus-circle me-2"></i>Adicionar Nova Categoria
                    </h5>

                    <EditForm Model="novoItem" OnValidSubmit="SubmitNewItem">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">Nome da Categoria</label>
                            <InputText class="form-control" @bind-Value="novoItem.NomeCategoria" />
                            <ValidationMessage For="() => novoItem.NomeCategoria" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Descrição (Opcional)</label>
                            <InputTextArea class="form-control" @bind-Value="novoItem.Descricao" />
                        </div>

                        <div class="form-check mb-3">
                            <InputCheckbox class="form-check-input" @bind-Value="novoItem.Ativo" id="ativoCheck" />
                            <label class="form-check-label" for="ativoCheck">Categoria Ativa</label>
                        </div>

                        <div class="d-flex justify-content-center gap-3 mt-3">
                            <button type="submit" class="btn btn-success px-4">
                                <i class="fa-solid fa-check me-1"></i>Salvar
                            </button>
                            <button type="button" class="btn btn-secondary px-4" @onclick="CancelForm">
                                <i class="fa-solid fa-xmark me-1"></i>Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool showAddForm = false;
    private List<Categoria> CategoriasLista = new();
    private Categoria novoItem = new() { Ativo = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        CategoriasLista = await DbContext.Categorias
            .OrderBy(c => c.NomeCategoria)
            .ToListAsync();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (showAddForm)
        {
            novoItem = new() { Ativo = true };
        }
    }

    private void CancelForm()
    {
        showAddForm = false;
        novoItem = new() { Ativo = true };
    }

    private async Task SubmitNewItem()
    {
        DbContext.Categorias.Add(novoItem);
        await DbContext.SaveChangesAsync();
        await LoadData();
        CancelForm();
    }

    private async Task DeleteItem(Categoria item)
    {
        // TODO: Adicionar verificação se a categoria está em uso por FAQs
        var itemParaExcluir = await DbContext.Categorias.FindAsync(item.IdCategoria);
        if (itemParaExcluir is not null)
        {
            DbContext.Categorias.Remove(itemParaExcluir);
            await DbContext.SaveChangesAsync();
        }
        await LoadData();
    }
}